// Description: Constructs a FHIR R4 MessageHeader Resource and its related resources based on V2 MSH Segment
//
// Argument(s):
//   MSH V2 Segment
//
// Output(s):
//   MessageHeader: https://www.hl7.org/fhir/messageheader.html
//   Organization: https://www.hl7.org/fhir/organization.html
//
def MSH_MessageHeader (required MSH) {
  id : $UUID(); 
  meta.tag[0].code : MSH.11.1;
  meta.tag[0].system : "http://terminology.hl7.org/CodeSystem/v2-0103";
  if (MSH.11.2) {
      meta.tag[1].code : MSH.11.2;
      meta.tag[1].system : "http://terminology.hl7.org/CodeSystem/v2-0207";
  }
  extension[0].url : $StrCat("urn:", Convert_Instant(MSH.7)); //Added  
  extension[0].valueDateTime : Convert_Instant(MSH.7); //Added
  extension[1].url : "urn:hl7-version-id"; //Added
  extension[1].valueString : MSH.12.1; //Added
  extension[2].url : "urn:message-control-id"; //Added
  extension[2].valueString : MSH.10; //Added
  eventCoding.code : MSH.9.2;
  eventCoding.display : $StrCat(MSH.9.1, "^", MSH.9.2, "^", MSH.9.3);
  eventCoding.system : "http://terminology.hl7.org/CodeSystem/v2-0003";
  destination[] : HD_MessageHeaderDestination(MSH.5, MSH.6, MSH.23);
  sender : Build_Reference(Output_Resource(HD_CC_Organization(MSH.4, MSH.17)));
  source : HD_MessageHeaderEndpoint(MSH.3);
  responsible : Build_Reference(Output_Resource(XON_Organization(MSH.22)));
  language : CWE_Code(MSH.19);
  resourceType : "MessageHeader";
}

// Description: Constructs a FHIR R4 Patient Resource and its related resources based on V2 PID & PD1 Segments
//
// Argument(s):
//   PID V2 Segment
//   PD1 V2 Segment
//
// Output(s):
//   Patient: https://www.hl7.org/fhir/patient.html
//   Organization: https://www.hl7.org/fhir/organization.html
//   Practitioner: https://www.hl7.org/fhir/practitioner.html
//
def PID_PD1_Patient(required PID, PD1) {
//  identifier[] : CX_Identifier(PID.2);
  identifier[] : CX_Identifier(PID.3[]);
  if (PID.3[0].5 = "MR") {
      identifier[0].type.text : "MPI";
    }
  identifier[] : CX_Identifier(PID.4[]);
  name[] : XPN_HumanName(PID.5[]);
  birthDate : Extract_Date(PID.7);
  gender : Convert_TerminologyCode(CWE_Code(PID.8), "HL70001", "Gender");
  name[] : XPN_HumanName(PID.9[]);
  address[] : XAD_Address(PID.11[]);
  address[].district : PID.12;
  telecom[] : XTN_ContactPoint(PID.13[], "home");
  telecom[] : XTN_ContactPoint(PID.14[], "work");
// TODO(): Uncomment below
//  communication[0].language : CWE_CodeableConcept(PID.15);   Need Terminology Mapping: No mappings found in community sheet
//  if (PID.15) {  
//    communication[0].preferred : true;
//  }
//TODO(): Define Concept Map
  maritalStatus : Convert_Terminology(CWE_Code(PID.16), "HL70010", "MaritalStatus");
//  identifier[] : ST_Identifier(PID.19);
//  identifier[] : DLN_Identifier(PID.20, "DL");
  if (~PID.25) {
    multipleBirthBoolean : PID.24="Y";
  }
  multipleBirthInteger : PID.25;
  deceasedDateTime : Convert_DateTime(PID.29);
  if (~PID.29) {
    deceasedBoolean (if PID.30): PID.30="Y";
  }
  meta.lastUpdated : Convert_DateTime(PID.33);
  telecom[] : XTN_ContactPoint(PID.40[], "home");
//  generalPractitioner[] : Build_Reference(Output_Resource[](XON_Organization[](PD1.3[])));
//  generalPractitioner[] : Build_Reference(Output_Resource[](XCN_Practitioner[](PD1.4[])));
  active : true;
  id : $Hash(PID.3[0].1);
  resourceType : "Patient";
}

// Description: Constructs a FHIR R4 Accout Resource based on V2 PID-18 Segment and Patient Resource
//
// Argument(s):
//   PID-18 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//
// Output(s):
//   Account: https://www.hl7.org/fhir/account.html
//
def PID_Account(required PID_18, Patient) {
  identifier[] : CX_Identifier(PID_18);
  subject[] : Build_Reference(Patient);
  status : "active";
  id : $UUID();
  resourceType : "Account";
}

// Description: Constructs a FHIR R4 RelatedPerson Resource and its related resources based on V2 NK1 Segment
//
// Argument(s):
//   NK1 V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//
// Output(s):
//   RelatedPerson: https://www.hl7.org/fhir/relatedperson.html
//
def NK1_RelatedPerson(required NK1, Patient) {
  name[] : XPN_HumanName(NK1.2[]);
  var relationshipCC : CWE_CodeableConcept(NK1.3);
  relationship[] (if relationshipCC) : Convert_Terminology(relationshipCC.coding[0].code, "HL70063", "Relationship");
  address[] : XAD_Address(NK1.4[]);
  telecom[] :  XTN_ContactPoint(NK1.5[], "home");
  telecom[] : XTN_ContactPoint(NK1.6[], "work");
  var relationshipCC : CWE_CodeableConcept(NK1.7);
  relationship[] (if relationshipCC) : Convert_Terminology(relationshipCC.coding[0].code, "HL70063", "Relationship");
  period.start : Convert_DateTime(NK1.8);
  period.end : Convert_DateTime(NK1.9);
  identifier[] : CX_Identifier(NK1.12);
  gender : Convert_TerminologyCode(CWE_Code(NK1.15), "HL70001", "Gender");
  birthDate : Extract_Date(NK1.16);
  communication[].language : CWE_CodeableConcept(NK1.20);
  name[] : XPN_HumanName(NK1.30[]);
  telecom[] :  XTN_ContactPoint(NK1.31[], "work");
  address[] : XAD_Address(NK1.32[]);
  identifier[] : CX_Identifier(NK1.33[]);
  identifier[] : ST_Identifier(NK1.37);
  telecom[] : XTN_ContactPoint(NK1.40, "home");
  telecom[] : XTN_ContactPoint(NK1.41, "work");
  patient : Build_Reference(Patient);
  id : $UUID();
  resourceType : "RelatedPerson";
}

// Description: Constructs a FHIR R4 Condition Resource and its related resources based on V2 DG1 Segment and Patient resource
//
// Argument(s):
//   DG1 V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//
// Output(s):
//   Condition: https://www.hl7.org/fhir/condition.html
//   Practitioner: https://www.hl7.org/fhir/practitioner.html
//
def DG1_Condition(required DG1, Patient) {
  code.coding[0].code : DG1.3.1;
  code.coding[0].display : DG1.3.2;
  if (DG1.3.3 = "I9") {
      code.coding[0].system : "http://hl7.org/fhir/sid/icd-9-cm";
  } else {
      if (DG1.3.3 = "I10") {
          code.coding[0].system : "http://hl7.org/fhir/sid/icd-10";
      } else { 
          if (DG1.3.3 = "SCT") {
              code.coding[0].system : "http://www.snomed.org";
          } else {
              code.coding[0].system : DG1.3.3;
            }
        }
  }
  code.text : DG1.4;
  subject.reference : $StrCat("Patient/", Patient.id);   
  onsetDateTime : Convert_DateTime(DG1.5);
  asserter : Build_Reference(Output_Resource(XCN_Practitioner(DG1.16[0])));
  recordedDate : Convert_DateTime(DG1.19);
//   verificationStatus.coding[0].code : "entered-in-error";
//   verificationStatus.coding[0].system : "http://terminology.hl7.org/CodeSystem/condition-ver-status";
  id : $Hash($StrCat(Patient.identifier[0].value,"_",DG1.3.1));
  extension[0].url : "urn:diagnosis-type"; //Added  
  extension[0].valueCodeableConcept.coding[0].code : DG1.6.1;
    if (DG1.6.2){
        extension[0].valueCodeableConcept.coding[0].display : DG1.6.2;        
    } else {
        extension[0].valueCodeableConcept.coding[0].display : Extension_Display_fn(DG1.6.1);     
    }
  identifier[0].value : $StrCat(Patient.identifier[0].value,"_",DG1.3.1);
  identifier[1] : EI_Identifier(DG1.20, "", "");
  category[0].coding[0].system : "http://terminology.hl7.org/CodeSystem/condition-category";
  category[0].coding[0].code : "encounter-diagnosis";
  category[0].coding[0].display : "Encounter Diagnosis";
  resourceType : "Condition";
}

// Description: Constructs a FHIR R4 Encounter Resource and its related resources based on V2 PV1, DG1 Segments and Patient, Condition resources
//
// Argument(s):
//   PV1 V2 Segment
//   DG1 V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//   Condition Resource already constructed through DG1_Condition Projector: https://www.hl7.org/fhir/condition.html
//
// Output(s):
//   Encounter: https://www.hl7.org/fhir/encounter.html
//
def PV1_DG1_Encounter(required PV1, DG1, Patient, Condition) {
  if (PV1.2) {
    var classCoding : CWE_Coding(PV1.2);
    class : Convert_TerminologyCoding(classCoding.code, "HL70004", "Encounter_Class");
  } else {
    class.system : "http://terminology.hl7.org/CodeSystem/v3-ActCode";
    class.code : "AMB";
    class.display : "ambulatory";
  }
  if (PV1.3.1.1) {
      location[0].location.reference : $StrCat("Location/", $Hash($ParseInt(PV1.3.1.1)));
  }
  type[0] : CWE_CodeableConcept(PV1.4);
  participant[] : Build_Participant(PV1.7[], "ATND", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "attender");
  participant[] : Build_Participant(PV1.8[], "REF", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "referrer");
  participant[] : Build_Participant(PV1.9[], "CON", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "consultant");
  participant[] : Build_Participant(PV1.17[], "ADM", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "admitter");
  identifier[0] : CX_Identifier(PV1.19);
  if (~PV1.19.5) {
    identifier[0].type.coding[0].code : "VN";
  }
  identifier[0].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/v2-0203";
  identifier[0].type.text : "visit number";
  period.start : Convert_DateTime(PV1.44);
  period.end : Convert_DateTime(PV1.45);
  if (~PV1.45 and PV1.2) {
      status : Convert_TerminologyCode(CWE_Code(PV1.2), "HL70004", "Encounter_Status");
  } else {
    status : "finished";
  }
  identifier[] : CX_Identifier(PV1.50[]);
  participant[] : Build_Participant(PV1.52[], "PART", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "Participation");
  if (DG1 or Condition) {
    diagnosis[] : DG1_Encounter(DG1[], Condition[]);
  }
  subject : Build_Reference(Patient);
  id : $Hash(PV1.19.1);
  resourceType : "Encounter";
}

// Description: Constructs a FHIR R4 AllergyIntolerance Resource based on AL1 Segment and Patient resource
//
// Argument(s):
//   AL1 V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//
// Output(s):
//   AllergyIntolerance: https://www.hl7.org/fhir/allergyintolerance.html
//
def AL1_AllergyIntolerance (required AL1, Patient) {
  category[] : Convert_TerminologyCode(CWE_Code(AL1.2), "http://terminology.hl7.org/CodeSystem/v2-0127", "Allergy_Category");
  type : Convert_TerminologyCode(CWE_Code(AL1.2), "http://terminology.hl7.org/CodeSystem/v2-0127", "Allergy_Type");
  code : CWE_CodeableConcept(AL1.3);
  clinicalStatus.coding[0].code : "active";
  clinicalStatus.coding[0].system : "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical";
  if (AL1.4 ~= "U") {
    reaction[0].severity : Convert_TerminologyCode(CWE_Code(AL1.4), "http://terminology.hl7.org/CodeSystem/v2-0128", "Allergy_Severity");
  }
// TODO(): Uncomment below
  //criticality : AL1.4 => CWE_Code;     Need Terminology Mapping: No mappings found in community sheet
//  reaction[0].manifestation[].text : AL1.5[];
  // TODO(): Generating invalid FHIR JSON
  reaction[0].manifestation[].text : "Place Holder";
  onsetDateTime : Convert_DateTime(AL1.6);
  patient : Build_Reference(Patient);
  id : $UUID();
  resourceType : "AllergyIntolerance";
}

// Description: Constructs a FHIR R4 Observation Resource based on OBX Segment and Patient resource
//
// Argument(s):
//   OBX V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//
// Output(s):
//   Observation: https://www.hl7.org/fhir/observation.html
//   Device : https://www.hl7.org/fhir/device.html
//   Patient: https://www.hl7.org/fhir/patient.html
//   Organization: https://www.hl7.org/fhir/organization.html
//   Practitioner: https://www.hl7.org/fhir/practitioner.html
//
def OBX_Observation (required OBX, Patient, PID, ORC) {
  if ($ListLen(OBX.5) > 1) {
    component[] : Build_ObservationComponent(OBX.5[], OBX.2, OBX.3, OBX.6);
  } else {
    if (OBX.3) {
      code : CWE_CodeableConcept(OBX.3);
    } else {
      code.coding[0].code : "10001-6";
    }
    $this : Build_ObservationValue(OBX.5[0], OBX.2, OBX.6);
  }
  referenceRange[0].text : OBX.7;
  if (OBX.11) {
    status : Convert_TerminologyCode(OBX.11, "HL70085", "Observation_Status");
  } else {
    status : "registered";
  }
  effectiveDateTime : Convert_DateTime(OBX.14);
  performer[] : Build_Reference(Output_Resource(XCN_Practitioner(OBX.16[])));
  method : CWE_CodeableConcept(OBX.17);
  device : Build_Reference(Output_Resource(EI_Device(OBX.18[])));
  bodySite : CWE_CodeableConcept(OBX.20[]);
  identifier[] : EI_Identifier(OBX.21, "FILL", "http://terminology.hl7.org/CodeSystem/v2-0203");
  performer[] : Build_Reference(Output_Resource(XON_XAD_Organization(OBX.23, OBX.24)));
  performer[] : Build_Reference(Output_Resource(XCN_Practitioner(OBX.25)));
  subject : Build_Reference(Patient);
  category[0].coding[0].system : "http://terminology.hl7.org/CodeSystem/observation-category";
  category[0].coding[0].code : "imaging";
  category[0].coding[0].display : "Imaging";
  id : $Hash($StrCat(ORC.2.1,"_",PID.3[0].1,"_",OBX.3.1));
  resourceType : "Observation";
}

// Description: Constructs a FHIR R4 DiagnosticReport Resource based on OBR Segment
//
// Argument(s):
//   OBR V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//
// Output(s):
//   DiagnosticReport: https://hl7.org/fhir/diagnosticreport.html
//   Patient: https://www.hl7.org/fhir/patient.html
//   Practitioner: https://www.hl7.org/fhir/practitioner.html
//   Specimen : https://hl7.org/fhir/specimen.html
//
def OBR_ORC_DiagnosticReport(required OBR, ORC, Patient, Observation) {
  identifier[] : EI_Identifier(OBR.2, "PLAC", "http://terminology.hl7.org/CodeSystem/v2-0203");
  identifier[] : EI_Identifier(OBR.3, "FILL", "http://terminology.hl7.org/CodeSystem/v2-0203");
  identifier[] : EI_Identifier(ORC.2, "PLAC", "http://terminology.hl7.org/CodeSystem/v2-0203");
  identifier[] : EI_Identifier(ORC.3, "FILL", "http://terminology.hl7.org/CodeSystem/v2-0203");
  identifier[] : EI_Identifier(ORC.4, "PGN", "http://terminology.hl7.org/CodeSystem/v2-0203");
  basedOn[0].reference : $StrCat("ServiceRequest/", $Hash($StrCat("OBR_",OBR.2.1)));
  if (OBR.4){
    code : CWE_CodeableConcept(OBR.4);  //Need ConceptMap
  } else {
    code.coding[0].code : "1003-3";
  }
  if (~OBR.7) {
    effectiveDateTime : Convert_DateTime(ORC.9);
  } else {
    if (~OBR.8) {
      effectiveDateTime : Convert_DateTime(OBR.7);
    } else {
      effectivePeriod.start : Convert_DateTime(OBR.7);
      effectivePeriod.end : Convert_DateTime(OBR.8);
    }
  }
  issued : Convert_Instant(OBR.22);
//  category[0].coding[0].code : OBR.24;      Need Terminology Mapping: No mappings found in community sheet
  if (OBR.25) {
    status : Convert_TerminologyCode(OBR.25, "HL70123", "Report_Status");
  } else {
    status : "registered";    // place-holder for 1-1 cardinality
  }
  performer[] : Build_Reference(Output_Resource(CNN_Practitioner(OBR.34.1)));
  performer[] : Build_Reference(Output_Resource(CNN_Practitioner(OBR.35.1)));
  specimen[] : Build_Reference(Output_Resource(OBR_Specimen(OBR, Patient)));
  result[] : Build_Reference(Observation[]);
  subject : Build_Reference(Patient);
  id : $UUID();
  resourceType : "DiagnosticReport";
}

// Description: Parse ORDER_OBSERVATION group, and constructs FHIR R4 Resources based on OBX, OBR, ORC sub-segments
//
// Argument(s):
//   ORDER_OBSERVATION Group
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/patient.html
//   Encounter Resource already constructed through PV1_DG1_Encounter Projector: https://www.hl7.org/fhir/encounter.html
//
// Output(s):
//   DiagnosticReport: https://hl7.org/fhir/diagnosticreport.html
//   Location: https://www.hl7.org/fhir/location.html
//   Observation: https://www.hl7.org/fhir/observation.html
//   Organization: https://www.hl7.org/fhir/organization.html
//   Practitioner: https://www.hl7.org/fhir/practitioner.html
//   Specimen : https://hl7.org/fhir/specimen.html
//
def PARSE_ORDER_OBSERVATION (required ORDER_OBSERVATION, Patient, PID) {
  var Observation : OBX_Observation(ORDER_OBSERVATION.OBSERVATION[*].OBX[], Patient, PID, ORDER_OBSERVATION.COMMON_ORDER.ORC);
  out Resources : Observation;

  var DiagnosticReport : OBR_ORC_DiagnosticReport(ORDER_OBSERVATION.OBR, ORDER_OBSERVATION.COMMON_ORDER.ORC, Patient, Observation);
  out Resources : DiagnosticReport;
}

// Description: Parse PATIENT_RESULT group, and constructs FHIR R4 Resources based on PID, PD1, PV1, OBX, OBR, ORC sub-segments
//
// Argument(s):
//   PATIENT_RESULT Group
//
// Output(s):
//   Account: https://www.hl7.org/fhir/account.html
//   Device : https://www.hl7.org/fhir/device.html
//   DiagnosticReport: https://hl7.org/fhir/diagnosticreport.html
//   Encounter: https://www.hl7.org/fhir/encounter.html
//   Location: https://www.hl7.org/fhir/location.html
//   Observation: https://www.hl7.org/fhir/observation.html
//   Organization: https://www.hl7.org/fhir/organization.html
//   Patient: https://www.hl7.org/fhir/patient.html
//   Practitioner: https://www.hl7.org/fhir/practitioner.html
//   Provenance: https://www.hl7.org/fhir/provenance.html
//   Specimen : https://hl7.org/fhir/specimen.html
//
def Parse_PATIENT_RESULT (required PATIENT_RESULT) {
  var Patient : PID_PD1_Patient(PATIENT_RESULT.PATIENT.PID, PATIENT_RESULT.PATIENT.PD1);
  var Patient.contact[] (if PATIENT_RESULT.PATIENT.NK1) : NK1_Contact(PATIENT_RESULT.PATIENT.NK1[]);
  out Resources : Patient;

  out Resources : PID_Account(PATIENT_RESULT.PATIENT.PID.18, Patient);

  out Resources : NK1_RelatedPerson(PATIENT_RESULT.PATIENT.NK1[], Patient);

  var Encounter : PV1_DG1_Encounter(PATIENT_RESULT.PATIENT.PV1, "", Patient, "");
  out Resources : Encounter;

  if (PATIENT_RESULT.PATIENT.PATIENT_OBSERVATION.OBX) {
    out Resources : OBX_Observation(PATIENT_RESULT.PATIENT.PATIENT_OBSERVATION.OBX, Patient, PATIENT_RESULT.ORDER_OBSERVATION[*].COMMON_ORDER.ORC);
  }

  $this : PARSE_ORDER_OBSERVATION(PATIENT_RESULT.ORDER_OBSERVATION[], Patient, PATIENT_RESULT.PATIENT.PID);
}


// Description: Parse PATIENT_RESULT group, and constructs FHIR R4 Resources based on PID, PD1, PV1, OBX, OBR, ORC sub-segments
//
// Argument(s):
//   ServiceRequest
// Input(s):
//   RF1: Referral
//   Patient
//   Condition
//   PROVIDER_CONTACT-PRD: Practitioner
//
// Output(s):
//   Practitioner: https://www.hl7.org/fhir/practitioner.html
//   ServiceRequest: https://www.hl7.org/fhir/servicerequest.html
//
def RF1_ServiceRequest(RF1, Patient, Condition, PC) {
  id : $Hash(RF1.6.1);
  extension[0].url : "urn:hl7-referral-status";
  extension[0].valueString : RF1.1.1;
  identifier[].value : RF1.6.1;
  intent : "proposal";
  if ((RF1.3.1) or (RF1.3.2)) {
      category[].text : $StrCat(RF1.3.1," - ",RF1.3.2);
  }
  priority : RF1.2;
  if (RF1.1.1 = "Referral Received" or RF1.1.1 = "Referral In Booking" or RF1.1.1 = "Referral Booked" or RF1.1.1 = "Referral Ready" or RF1.1.1 = "Referral Image Ready" or RF1.1.1 = "Referral Report Ready") {
    status : "active";
  } else {
      if (RF1.1.1 = "Referral Complete") {
          status : "completed";
      } else {
          if (RF1.1.1 = "Incomplete") {
              status : "draft";
          } else {
              status : "unknown";
          }
      }
    }
  subject : Build_Reference(Patient);
  authoredOn : Extract_Date(RF1.7);
  var Practitioner : PRD_Practitioner(PC.PRD);
  out Resources : Practitioner;
  requester : Build_Reference(Practitioner);
  reasonReference[] : Build_Reference(Condition[]); 
  note[].text : RF1.24[];
  resourceType : "ServiceRequest"
}

// Description: Parse PATIENT_RESULT group, and constructs FHIR R4 Resources based on PID, PD1, PV1, OBX, OBR, ORC sub-segments
//
// Argument(s):
//   Coverage
// Input(s):
//   INSURANCE-IN1,IN2,IN3: Insurance
//   Patient
//   PID: Patient Identification
//
// Output(s):
//   Coverage: https://www.hl7.org/fhir/coverage.html
//   Organization: https://www.hl7.org/fhir/organization.html
//
def INSURANCE1_Coverage(required INS, Patient, PID) {
  id : $Hash($StrCat(PID.3[0].1,"_",INS.IN1.2.1))
  identifier[0].value : $StrCat(PID.3[0].1,"_",INS.IN1.2.1)
  status : "active";  
  if (INS.IN1.2.1 = "SP"){
    type.text : "Self Pay";
  } else {
    type.text : "Insurance";
  }
  subscriber.display : $StrCat(INS.IN1.16[0].2," ",INS.IN1.16[0].1.1);
  beneficiary : Build_Reference(Patient);
  dependent : INS.IN1.17.1;
  period.start : Extract_Date(INS.IN1.12);
  period.end : Extract_Date(INS.IN1.13);
  if (INS.IN1.2.1 = "SP"){
    payor[] : Build_Reference(Patient);
  } else {
    var Organization : IN_Organization(INS.IN1.3[], INS.IN1.4[], INS.IN1.5[], INS.IN1.7[], "work");
    out Resources : Organization;
    payor[] : Build_Reference(Organization[]);
    }
  class[0].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/coverage-class";
  class[0].type.coding[0].code : "group";
  class[0].type.coding[0].display : "Group";
  class[0].value : INS.IN1.8;
  class[0].name : INS.IN1.9; 
  resourceType : "Coverage";
}

// Description: Parse PATIENT_RESULT group, and constructs FHIR R4 Resources based on PID, PD1, PV1, OBX, OBR, ORC sub-segments
//
// Argument(s):
//   Procedure
// Input(s):
//   PROCEDURE-PR1: Procedure
//   Patient
//   PID: Patient Identification
//   Condition
//
// Output(s):
//   Procedure: https://www.hl7.org/fhir/procedure.html
def PRC_PR1_Procedure(PRC, Patient, PID, Condition) {
  id : $Hash($StrCat(PID.3[0].1,"_",PRC.PR1.3.1));
  identifier[0].value : $StrCat(PID.3[0].1,"_",PRC.PR1.3.1);
  status : "unknown";
  code.coding[] : Procedure_Coding(PRC.PR1.3);
  subject : Build_Reference(Patient);
  performedDateTime : Extract_Date(PRC.PR1.5);
  reasonReference[] : Build_Reference(Condition[]);
  resourceType : "Procedure";
}

// Description: Build the Account Resource based upon the PID-18 offset, Patient resource, GT1, and Coverage resource
//
// Argument(s):
//   Account
// Input(s):
//   PID-18: Patient Identification - Patient Account Number
//   Patient
//   GT1: Guarantor
//   Coverage
//
// Output(s):
//   Procedure: https://www.hl7.org/fhir/account.html
//   Procedure: https://www.hl7.org/fhir/relatedperson.html

def PID1_Account(required PID_18, Patient, GT1, Coverage) {
  identifier[] : CX_Identifier(PID_18);
  subject[] : Build_Reference(Patient);
  status : "active";
  id : $Hash(PID_18.1);
  coverage[].coverage : Build_Reference(Coverage);
  if (GT1.11.1 = "SEL") {
      guarantor[].party : Build_Reference(Patient);
    } else {
      var RelatedPerson : GT1_Guarantor(GT1, Patient);
      out Resources : RelatedPerson;
      guarantor[].party : Build_Reference(RelatedPerson);
    }
  resourceType : "Account";
}

// Description: Build a Related Person Resource based upon the Patient resource and GT1
//
// Argument(s):
//   Account
// Input(s):
//   Patient
//   GT1: Guarantor
//
// Output(s):
//   Procedure: https://www.hl7.org/fhir/relatedperson.html

def GT1_Guarantor(GT1, Patient) {
  id : $UUID();
  patient : Build_Reference(Patient);
  name[] : XPN_HumanName(GT1.3[]);
  telecom[] : XTN_ContactPoint(GT1.6[], "home");
  telecom[] : XTN_ContactPoint(GT1.7[], "work");
  address[] :  XAD_Address(GT1.5[]);
  birthDate : Extract_Date(GT1.8);
  relationship[0].coding[0].code : GT1.11.1;
  relationship[0].coding[0].display : GT1.11.2;
  resourceType : "RelatedPerson";
}

// Description: Build a ServiceRequest Resource based upon the Patient resource and GT1
//
// Argument(s):
//   Account
// Input(s):
//   Patient
//   GT1: Guarantor
//
// Output(s):
//   Procedure: https://www.hl7.org/fhir/relatedperson.html
def Parse_ORDER(ORDER, Patient, Condition) {
 $this : ORC_OBR_ServiceRequest(ORDER.ORC, ORDER.OBR);
  intent : "order";
  subject : Build_Reference(Patient);
  reasonReference[] : Build_Reference(Condition[]); 
  resourceType : "ServiceRequest";  
}

def ORC_OBR_ServiceRequest(ORC, OBR) {
  id : $Hash($StrCat("OBR_", OBR.2.1));
  extension[0].url : "urn:hl7-order-status";
  extension[0].valueCodeableConcept.coding[0] : Convert_TerminologyCoding(ORC.5, "HL70120", "Source_Order_Status");
  identifier[].value : $StrCat("OBR_", OBR.2.1);
  basedOn[].reference : $StrCat("ServiceRequest/", $Hash($StrCat("RF1_", OBR.2.1)));
  code.coding[0].code : OBR.4.1;
  code.coding[0].display : OBR.4.2;
  if (OBR.4.3 = "C4") {
      code.coding[0].system : "http://www.ama-assn.org/go/cpt";
    }
  priority : OBR.5;
  status : Convert_TerminologyCode(ORC.5, "HL70110", "Order_Status");
  occurrenceDateTime : Extract_Date(OBR.6);
  authoredOn : Extract_Date(ORC.9);
}



